version: "2.2"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - discovery.seed_hosts=""
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ENTERPRISESEARCH_HOST=http://enterprisesearch:${ENTERPRISE_SEARCH_PORT}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
#  enterprisesearch:
#    depends_on:
#      es01:
#        condition: service_healthy
#      kibana:
#        condition: service_healthy
#    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
#    volumes:
#      - certs:/usr/share/enterprise-search/config/certs
##      - enterprisesearchdata:/usr/share/enterprise-search/config
#    ports:
#      - ${ENTERPRISE_SEARCH_PORT}:3002
#    environment:
#      - SERVERNAME=enterprisesearch
#      - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
#      - allow_es_settings_modification=true
#      - elasticsearch.host=https://es01:9200
#      - elasticsearch.username=elastic
#      - elasticsearch.password=${ELASTIC_PASSWORD}
#      - elasticsearch.ssl.enabled=true
#      - elasticsearch.ssl.certificate_authority=/usr/share/enterprise-search/config/certs/ca/ca.crt
#      - kibana.external_url=http://kibana:5601
#    mem_limit: ${MEM_LIMIT}
#    healthcheck:
#      test:
#        [
#          "CMD-SHELL",
#          "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
#        ]
#      interval: 10s
#      timeout: 10s
#      retries: 120

    # configuration manager for NiFi
  zookeeper:
      hostname: myzookeeper
      container_name: zookeeper_container_persistent
      image: 'bitnami/zookeeper:3.9.1'  # latest image as of 2024-01-18.
      restart: on-failure
      environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
#      networks:
#        - my_persistent_network
    # version control for nifi flows
  registry:
      hostname: myregistry
      container_name: registry_container_persistent
      image: 'apache/nifi-registry:2.0.0-M1'  # latest image as of 2024-01-18.
      restart: on-failure
      ports:
        - "18080:18080"
      environment:
        - LOG_LEVEL=INFO
        - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
        - NIFI_REGISTRY_FLOW_PROVIDER=file
        - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
      volumes:
        #- ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
        #- ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
        - nifi-registry:/opt/nifi-registry/nifi-registry-current
        - ./input:/tmp/input
#      networks:
#        - my_persistent_network
    # data extraction, transformation and load service
  nifi:
      hostname: mynifi
      container_name: nifi_container_persistent
      image: 'apache/nifi:2.0.0-M1'  # latest image as of 2024-01-18.
      restart: on-failure
      ports:
        - '8443:8443'
      environment:
        - NIFI_CLUSTER_IS_NODE=true
        - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
        - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
        - NIFI_ELECTION_MAX_WAIT=30 sec
        - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
        - SINGLE_USER_CREDENTIALS_USERNAME=user
        - SINGLE_USER_CREDENTIALS_PASSWORD=password1234
      healthcheck:
        test: "${DOCKER_HEALTHCHECK_TEST:-curl -k localhost:8443/nifi/}"
        interval: "60s"
        timeout: "3s"
        retries: 5
      volumes:
        #- ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
        #- ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
        #- ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
        #- ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
        #- ./nifi/state:/opt/nifi/nifi-current/state
        #- ./nifi/logs:/opt/nifi/nifi-current/logs
        - nifi:/opt/nifi/nifi-current
        # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
        #- ./nifi/conf:/opt/nifi/nifi-current/conf
#      networks:
#        - my_persistent_network

volumes:
  certs:
    driver: local
  nifi-registry:
    driver: local
  nifi:
    driver: local
#  enterprisesearchdata:
#    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local